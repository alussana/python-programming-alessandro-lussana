######################
### DATA STRUCTURE ###
######################

import pandas as pd
import numpy as np

##############
### Series ###

## A one-dimensional labeled array capable of holding any data type
## Supports non-unique index values

pd.Series(list_or_dict)
pd.Series(data, index=index) 

## If no index is passed, one will be created having values 
## [0, ..., len(data) - 1].

## len(index) > len(dict) is allowed
## NaN (not a number) is the standard missing data marker used in pandas

########################
### Accessing Series ###

s[index]        ## value
index in s      ## boolean
s.get(index)    ## will not raise exceptions for missing labels

## mathematical operations can be performed on series
## operations between series automatically align the data based on labels

s = pd.Series(np.random.randn(4),index=["a","b","c","d"],name="serie")
s[1:] + s[:-1]

s2 = s.rename("different")

##################
### Data Frame ###

## A 2-dimensional labeled data structure

pd.date_range('20130101', periods=6)
pd.DataFrame(np.random.randn(6,4), index=dates, columns=list('ABCD'))

## Accepts many different kinds of input:
##      Dict of 1D ndarrays, lists, dicts, or Series
##      2-D numpy.ndarray
##      Structured or record ndarray
##      A Series
##      Another DataFrame

## NaN will be automatically inserted when needed

d = {'one' : pd.Series([1., 2., 3.], index=['a', 'b', 'c']),
    'two' : pd.Series([1., 2., 3., 4.], index=['a', 'b', 'c', 'd'])}

## columns data types can be different
df.dtypes

## Viewing data
df.head()
df.tail()
df.index()
df.columns()    
df.values()

## summary statistics
df.describe()

## handling
df.sort_index(axis=1, ascending=False)  ## axis can be == 1 or 0
df.sort_values(by="B")
df.T    ## transpose
